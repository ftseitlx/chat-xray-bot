import asyncio
import logging
import sys
from datetime import datetime

import sentry_sdk
from aiogram import Bot, Dispatcher, Router, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    BotCommand, Message, FSInputFile, 
    InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
)
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiogram.client.default import DefaultBotProperties
from aiohttp import web
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import re
from bs4 import BeautifulSoup

from app.config import settings
from app.utils import cleanup

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    stream=sys.stdout,
)

logger = logging.getLogger(__name__)

# Initialize Sentry if DSN is provided
if settings.SENTRY_DSN:
    sentry_sdk.init(
        dsn=settings.SENTRY_DSN,
        environment=settings.ENVIRONMENT,
        traces_sample_rate=0.1,
    )

# Initialize bot and dispatcher with updated syntax for aiogram 3.x
bot = Bot(
    token=settings.BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

# Setup main router
main_router = Router()


@main_router.message(CommandStart())
async def command_start(message: Message):
    await message.answer(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Chat X-Ray Bot, {message.from_user.first_name}!\n\n"
        f"–Ø –º–æ–≥—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤–∞—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π.\n\n"
        f"–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∞ —á–∞—Ç–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ .txt –∏–ª–∏ .html, –¥–æ 2 –ú–ë), –∏ —è –ø—Ä–æ–≤–µ–¥—É –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –≤–∞—Å.\n\n"
        f"–Ø –∏—Å–ø–æ–ª—å–∑—É—é –ø–µ—Ä–µ–¥–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ —Ä–∞–±–æ—Ç–∞—Ö –ì–∞–±–æ—Ä–∞ –ú–∞—Ç–µ, –î–∂–æ–Ω–∞ –ì–æ—Ç—Ç–º–∞–Ω–∞ –∏ –¥—Ä—É–≥–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç–Ω–æ—à–µ–Ω–∏–π.\n\n"
        f"<b>–ö–æ–º–∞–Ω–¥—ã</b>:\n"
        f"/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        f"/privacy - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à—É –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏\n"
        f"/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
        f"/about - –£–∑–Ω–∞—Ç—å –æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç–µ–æ—Ä–∏—è—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –≤ –∞–Ω–∞–ª–∏–∑–µ"
    )


@main_router.message(Command("privacy"))
async def privacy_command(message: Message):
    with open("docs/privacy_policy.md", "r") as f:
        privacy_text = f.read()
    
    await message.answer(
        "–ù–∞—à–∞ –ü–æ–ª–∏—Ç–∏–∫–∞ –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:\n\n"
        f"{privacy_text[:3900]}...\n\n"  # Limit to Telegram's message size
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—à –≤–µ–±-—Å–∞–π—Ç."
    )


@main_router.message(Command("help"))
async def help_command(message: Message):
    await message.answer(
        "<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Chat X-Ray:</b>\n\n"
        "1. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –∏–∑ –≤–∞—à–µ–≥–æ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (.txt) –∏–ª–∏ HTML-—Ñ–∞–π–ª (.html)\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —ç—Ç–æ–º—É –±–æ—Ç—É (—Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 2 –ú–ë)\n"
        "3. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ (–æ–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç –æ–∫–æ–ª–æ –º–∏–Ω—É—Ç—ã –±–ª–∞–≥–æ–¥–∞—Ä—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ)\n"
        "4. –ü–æ–ª—É—á–∏—Ç–µ –∫—Ä–∞—Ç–∫–∏–µ –≤—ã–≤–æ–¥—ã –ø—Ä—è–º–æ –≤ Telegram –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª–Ω—ã–π PDF-–æ—Ç—á–µ—Ç\n\n"
        "<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>\n"
        "‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç WhatsApp\n"
        "‚Ä¢ HTML-—ç–∫—Å–ø–æ—Ä—Ç WhatsApp\n"
        "‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ª–æ–≥–∏ —á–∞—Ç–æ–≤\n\n"
        "<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</b>\n"
        "‚Ä¢ –í–∞—à–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ 1 —á–∞—Å\n"
        "‚Ä¢ –û—Ç—á–µ—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 72 —á–∞—Å–æ–≤\n"
        "‚Ä¢ –í —Ü–µ–ª—è—Ö –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –º—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞ –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –æ—Å–Ω–æ–≤–µ"
    )


@main_router.message(Command("about"))
async def about_command(message: Message):
    await message.answer(
        "<b>–û –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –∞–Ω–∞–ª–∏–∑–µ Chat X-Ray:</b>\n\n"
        "–ù–∞—à –∞–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç–µ–æ—Ä–∏—è—Ö:\n\n"
        "1. <b>–¢–µ–æ—Ä–∏—è –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –ì–∞–±–æ—Ä–∞ –ú–∞—Ç–µ</b> - –∞–Ω–∞–ª–∏–∑ –º–æ–¥–µ–ª–µ–π –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –∏ –∏—Ö –≤–ª–∏—è–Ω–∏—è –Ω–∞ –æ–±—â–µ–Ω–∏–µ\n\n"
        "2. <b>–ß–µ—Ç—ã—Ä–µ –≤—Å–∞–¥–Ω–∏–∫–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π –î–∂–æ–Ω–∞ –ì–æ—Ç—Ç–º–∞–Ω–∞</b> - –≤—ã—è–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏–∫–∏, –∑–∞—â–∏—Ç—ã, –ø—Ä–µ–∑—Ä–µ–Ω–∏—è –∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è\n\n"
        "3. <b>–ù–µ–Ω–∞—Å–∏–ª—å—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ –ú–∞—Ä—à–∞–ª–ª–∞ –†–æ–∑–µ–Ω–±–µ—Ä–≥–∞</b> - –∞–Ω–∞–ª–∏–∑ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π, —ç–º–æ—Ü–∏–π –∏ –∑–∞–ø—Ä–æ—Å–æ–≤\n\n"
        "4. <b>–¢—Ä–∞–Ω—Å–∞–∫—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≠—Ä–∏–∫–∞ –ë–µ—Ä–Ω–∞</b> - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –†–æ–¥–∏—Ç–µ–ª—å-–í–∑—Ä–æ—Å–ª—ã–π-–†–µ–±–µ–Ω–æ–∫\n\n"
        "–ö–∞–∂–¥—ã–π –æ—Ç—á–µ—Ç –≤–∫–ª—é—á–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö, —Ü–∏—Ç–∞—Ç—ã, –∞–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏–∫–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ —ç—Ç–∏—Ö –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –º–æ–¥–µ–ª—è—Ö."
    )


# Define the FSM states
class ChatProcessingStates(StatesGroup):
    waiting_for_file = State()
    processing = State()


# Router for file handling
upload_router = Router()


# Function to extract key insights from HTML report for Telegram
async def extract_insights_for_telegram(html_content: str) -> str:
    """Extract key insights from HTML report for Telegram message"""
    # Using BeautifulSoup to parse HTML
    soup = BeautifulSoup(html_content, 'html.parser')
    
    # Initialize a result string with header
    insights = "<b>üîç –ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–Ω–æ—à–µ–Ω–∏–π:</b>\n\n"
    
    # Try to get the main insights
    try:
        # Extract overview section (first paragraph)
        overview = soup.find('h2', text=re.compile('–û–±—â–∏–π –æ–±–∑–æ—Ä', re.IGNORECASE))
        if overview and overview.find_next('p'):
            first_paragraph = overview.find_next('p').text.strip()
            insights += f"<b>–û–±—â–∏–π –æ–±–∑–æ—Ä:</b> {first_paragraph[:200]}...\n\n"
        
        # Extract communication patterns
        patterns = soup.find('h2', text=re.compile('–ü–∞—Ç—Ç–µ—Ä–Ω—ã –æ–±—â–µ–Ω–∏—è', re.IGNORECASE))
        if patterns and patterns.find_next('p'):
            pattern_text = patterns.find_next('p').text.strip()
            insights += f"<b>–ü–∞—Ç—Ç–µ—Ä–Ω—ã –æ–±—â–µ–Ω–∏—è:</b> {pattern_text[:200]}...\n\n"
        
        # Extract emotional analysis
        emotions = soup.find('h2', text=re.compile('–ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π', re.IGNORECASE))
        if emotions and emotions.find_next('p'):
            emotion_text = emotions.find_next('p').text.strip()
            insights += f"<b>–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:</b> {emotion_text[:200]}...\n\n"
        
        # Extract top recommendations (first 3)
        recommendations = soup.find('h2', text=re.compile('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', re.IGNORECASE))
        if recommendations:
            rec_items = recommendations.find_next_siblings('div', class_='recommendation')[:3]
            if rec_items:
                insights += "<b>–ö–ª—é—á–µ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
                for i, rec in enumerate(rec_items, 1):
                    rec_text = rec.text.strip()
                    insights += f"{i}. {rec_text[:100]}...\n"
        
        # Extract key quotes (first 2)
        quotes = soup.find_all('div', class_='quote')[:2]
        if quotes:
            insights += "\n<b>–ö–ª—é—á–µ–≤—ã–µ —Ü–∏—Ç–∞—Ç—ã:</b>\n"
            for quote in quotes:
                quote_text = quote.find('p').text.strip()
                author = quote.find('p', class_='quote-author')
                if author:
                    insights += f"‚Ä¢ <i>¬´{quote_text}¬ª</i> ‚Äî {author.text.strip()}\n"
                else:
                    insights += f"‚Ä¢ <i>¬´{quote_text}¬ª</i>\n"
    
    except Exception as e:
        logger.error(f"Error extracting insights: {e}")
        insights += "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ –≤—ã–≤–æ–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–æ–ª–Ω–æ–º—É –æ—Ç—á–µ—Ç—É."
    
    return insights


@upload_router.message(F.document)
async def handle_document(message: Message):
    """Handle document uploads and process valid text or HTML files"""
    # Check if document exists
    if not message.document:
        await message.answer("‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∏–ª–∏ HTML-—ç–∫—Å–ø–æ—Ä—Ç —á–∞—Ç–∞.")
        return
    
    # Check MIME type - accept text/plain or text/html
    valid_mime_types = ["text/plain", "text/html"]
    if message.document.mime_type not in valid_mime_types:
        await message.answer(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (.txt) –∏–ª–∏ HTML-—ç–∫—Å–ø–æ—Ä—Ç —á–∞—Ç–∞ (.html)."
        )
        return
    
    # Check file size
    if message.document.file_size > settings.MAX_FILE_SIZE:
        await message.answer(
            f"‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä {settings.MAX_FILE_SIZE // (1024 * 1024)} –ú–ë."
        )
        return
    
    # All checks passed, let's download and process the file
    await message.answer("‚úÖ –í–∞—à —Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑...")
    
    try:
        # Process the file by importing here to avoid circular imports
        from app.services.chunker import split_chat
        from app.services.llm_primary import process_chunks
        from app.services.llm_meta import generate_meta_report
        from app.services.render import render_to_pdf
        from app.utils.logging_utils import log_cost
        import os
        import uuid
        from pathlib import Path
        import openai
        
        # Generate unique IDs for the files
        file_id = str(uuid.uuid4())
        
        # Set the appropriate file extension based on mime type
        file_extension = ".html" if message.document.mime_type == "text/html" else ".txt"
        upload_file_path = settings.UPLOAD_DIR / f"{file_id}{file_extension}"
        report_file_path = settings.REPORT_DIR / f"{file_id}.pdf"
        html_file_path = settings.REPORT_DIR / f"{file_id}_report.html"
        
        # Download the file
        await bot.download(
            message.document,
            destination=upload_file_path
        )
        
        # Let the user know we're processing
        status_message = await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —á–∞—Ç... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–∏–Ω—É—Ç—É –∏–ª–∏ –¥–≤–µ.")
        
        # Split the chat into chunks
        chunks = split_chat(upload_file_path)
        num_chunks = len(chunks)
        
        if num_chunks == 0:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –ø—É—Å—Ç –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç?")
            os.unlink(upload_file_path)
            return
        
        # Process chunks with GPT-3.5
        await status_message.edit_text(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {num_chunks} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞ (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)...")
        
        try:
            analysis_results = await process_chunks(chunks)
            
            # Generate meta report with GPT-4
            await status_message.edit_text("‚ú® –°–æ–∑–¥–∞—é –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç...")
            
            try:
                html_content = await generate_meta_report(analysis_results)
                
                # Save HTML content to file
                with open(html_file_path, "w", encoding="utf-8") as f:
                    f.write(html_content)
                
                # Render HTML to PDF
                pdf_url = await render_to_pdf(html_file_path, report_file_path)
                
                # Generate a public URL for the PDF
                report_url = f"{settings.WEBHOOK_HOST}/reports/{os.path.basename(report_file_path)}" if settings.WEBHOOK_HOST else f"file://{report_file_path}"
                
                # Calculate and log approximate cost
                approx_cost = (num_chunks * 0.0005) + 0.01  # $0.0005 per chunk for GPT-3.5 + $0.01 for GPT-4 Turbo
                await log_cost(message.from_user.id, num_chunks, approx_cost)
                
                # Extract insights for Telegram message
                telegram_insights = await extract_insights_for_telegram(html_content)
                
                # Send success message with download option
                
                # If we're in local mode without a webhook, just send the file directly
                if not settings.WEBHOOK_HOST:
                    await status_message.delete()
                    
                    # First send insights as HTML message
                    await message.answer(
                        telegram_insights,
                        parse_mode=ParseMode.HTML
                    )
                    
                    # Then send the full report as a document
                    await message.answer_document(
                        FSInputFile(report_file_path),
                        caption="–í–∞—à –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç Chat X-Ray –≥–æ—Ç–æ–≤. –≠—Ç–æ—Ç —Ñ–∞–π–ª –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 72 —á–∞—Å–æ–≤."
                    )
                else:
                    # In production with webhook, send insights and a link
                    await status_message.delete()
                    
                    # First send insights as HTML message
                    await message.answer(
                        telegram_insights,
                        parse_mode=ParseMode.HTML
                    )
                    
                    # Then send the link to full report
                    download_markup = InlineKeyboardMarkup(
                        inline_keyboard=[
                            [InlineKeyboardButton(
                                text="üìä –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç",
                                url=report_url
                            )]
                        ]
                    )
                    
                    await message.answer(
                        "üìã –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                        reply_markup=download_markup
                    )
                
                # Add metadata to track file expiration
                expiration_time = datetime.now().timestamp() + (settings.REPORT_RETENTION_HOURS * 3600)
                with open(f"{report_file_path}.meta", "w") as f:
                    f.write(str(expiration_time))
                
                # Delete the original upload file metadata
                upload_expiration_time = datetime.now().timestamp() + (settings.UPLOAD_RETENTION_HOURS * 3600)
                with open(f"{upload_file_path}.meta", "w") as f:
                    f.write(str(upload_expiration_time))
                
            except openai.RateLimitError as e:
                logger.error(f"Rate limit error during meta analysis: {e}")
                await status_message.edit_text(
                    "‚ö†Ô∏è –ú—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.\n\n"
                    "–≠—Ç–æ –æ–±—ã—á–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö —á–∞—Ç–æ–≤ –∏–ª–∏ –≤ –ø–µ—Ä–∏–æ–¥—ã –ø–∏–∫–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏.\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
                )
                
            except Exception as e:
                logger.exception(f"Error in meta analysis: {e}")
                await status_message.edit_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.\n\n"
                    f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ –∏—Å—á–µ–∑–Ω–µ—Ç."
                )
                
        except openai.RateLimitError as e:
            logger.error(f"Rate limit error during chunk processing: {e}")
            await status_message.edit_text(
                "‚ö†Ô∏è –ú—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤–∞—à–µ–≥–æ —á–∞—Ç–∞.\n\n"
                "–≠—Ç–æ –æ–±—ã—á–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö —á–∞—Ç–æ–≤ –∏–ª–∏ –≤ –ø–µ—Ä–∏–æ–¥—ã –ø–∏–∫–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
            )
            
        except Exception as e:
            logger.exception(f"Error in chunk processing: {e}")
            await status_message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤–∞—à–µ–≥–æ —á–∞—Ç–∞.\n\n"
                f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ –∏—Å—á–µ–∑–Ω–µ—Ç."
            )
        
    except Exception as e:
        logger.exception(f"Error processing file: {e}")
        if settings.SENTRY_DSN:
            sentry_sdk.capture_exception(e)
        
        await message.answer(
            "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        
        # Make sure to clean up any files if there was an error
        if os.path.exists(upload_file_path):
            os.unlink(upload_file_path)
        if os.path.exists(html_file_path):
            os.unlink(html_file_path)
        if os.path.exists(report_file_path):
            os.unlink(report_file_path)


# Health check endpoint
async def health_check(request):
    logger.info("Health check request received")
    return web.Response(text="OK", status=200)


async def main():
    # Setup routers
    dp.include_router(main_router)
    dp.include_router(upload_router)
    
    # Setup scheduler for cleanup tasks
    scheduler = AsyncIOScheduler()
    
    # Schedule cleanup tasks
    scheduler.add_job(
        cleanup.clean_old_uploads,
        "interval",
        hours=1,
        kwargs={"hours": settings.UPLOAD_RETENTION_HOURS},
    )
    scheduler.add_job(
        cleanup.clean_old_reports,
        "interval",
        hours=6,
        kwargs={"hours": settings.REPORT_RETENTION_HOURS},
    )
    
    # Start the scheduler
    scheduler.start()
    
    # If webhook URL is provided, use webhook mode
    if settings.WEBHOOK_URL:
        logger.info(f"Starting in webhook mode with URL: {settings.WEBHOOK_URL}")
        logger.info(f"Web server will listen on {settings.HOST}:{settings.PORT}")
        
        # Create web application
        app = web.Application()
        
        # Setup webhook handler
        webhook_requests_handler = SimpleRequestHandler(
            dispatcher=dp,
            bot=bot,
        )
        webhook_requests_handler.register(app, path=settings.WEBHOOK_PATH)
        
        # Setup health check endpoint
        app.router.add_get("/health", health_check)
        
        # Setup reports static directory
        app.router.add_static("/reports/", path=str(settings.REPORT_DIR), name="reports")
        
        # Set webhook
        await bot.set_webhook(url=settings.WEBHOOK_URL)
        logger.info(f"Webhook set at: {settings.WEBHOOK_URL}")
        
        # Setup application
        setup_application(app, dp, bot=bot)
        
        # Start web application
        logger.info("Starting web application")
        web.run_app(app, host=settings.HOST, port=settings.PORT)
    else:
        # Use polling mode
        logger.info("Starting in polling mode as WEBHOOK_URL is not set")
        await bot.delete_webhook()
        await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main()) 