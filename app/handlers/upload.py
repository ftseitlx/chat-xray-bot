import logging
import os
import uuid
from datetime import datetime

from aiogram import Router, F
from aiogram.types import Message, FSInputFile

from app.config import settings
from app.services.chunker import split_chat
from app.services.llm_primary import process_chunks
from app.services.llm_meta import generate_meta_report
from app.services.render import render_to_pdf
from app.utils.logging_utils import log_cost

router = Router()
logger = logging.getLogger(__name__)


@router.message(F.document)
async def handle_document(message: Message):
    """Handle document uploads and process valid text files"""
    # Check if document exists
    if not message.document:
        await message.answer("‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª.")
        return
    
    # Check MIME type
    if message.document.mime_type != "text/plain":
        await message.answer(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (.txt)."
        )
        return
    
    # Check file size
    if message.document.file_size > settings.MAX_FILE_SIZE:
        await message.answer(
            f"‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä {settings.MAX_FILE_SIZE // (1024 * 1024)} –ú–ë."
        )
        return
    
    # All checks passed, let's download and process the file
    await message.answer("‚úÖ –í–∞—à —Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑...")
    
    # Generate unique IDs for the files
    file_id = str(uuid.uuid4())
    upload_file_path = settings.UPLOAD_DIR / f"{file_id}.txt"
    report_file_path = settings.REPORT_DIR / f"{file_id}.pdf"
    html_file_path = settings.REPORT_DIR / f"{file_id}.html"
    
    try:
        # Download the file
        await message.bot.download(
            message.document,
            destination=upload_file_path
        )
        
        # Let the user know we're processing
        status_message = await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —á–∞—Ç... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–∏–Ω—É—Ç—É –∏–ª–∏ –¥–≤–µ.")
        
        # Split the chat into chunks
        chunks = split_chat(upload_file_path)
        num_chunks = len(chunks)
        
        if num_chunks == 0:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –ø—É—Å—Ç –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç?")
            os.unlink(upload_file_path)
            return
        
        # Process chunks with GPT-3.5
        await status_message.edit_text(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {num_chunks} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞...")
        analysis_results = await process_chunks(chunks)
        
        # Generate meta report with GPT-4
        await status_message.edit_text("‚ú® –°–æ–∑–¥–∞—é –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç...")
        html_content = await generate_meta_report(analysis_results)
        
        # Save HTML content to file
        with open(html_file_path, "w", encoding="utf-8") as f:
            f.write(html_content)
        
        # Render HTML to PDF
        pdf_url = await render_to_pdf(html_file_path, report_file_path)
        
        # Generate a public URL for the PDF
        report_url = f"{settings.WEBHOOK_HOST}/reports/{os.path.basename(report_file_path)}" if settings.WEBHOOK_HOST else f"file://{report_file_path}"
        
        # Calculate and log approximate cost
        approx_cost = (num_chunks * 0.0005) + 0.03  # Approximate cost: $0.0005 per chunk for GPT-3.5 + $0.03 for GPT-4
        await log_cost(message.from_user.id, num_chunks, approx_cost)
        
        # Send success message with download option
        await status_message.delete()
        
        # If we're in local mode without a webhook, just send the file directly
        if not settings.WEBHOOK_HOST:
            await message.answer(
                "üéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –í–æ—Ç –≤–∞—à –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –æ–± –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö:",
                reply_markup=None
            )
            await message.answer_document(
                FSInputFile(report_file_path),
                caption="–í–∞—à –æ—Ç—á–µ—Ç Chat X-Ray –≥–æ—Ç–æ–≤. –≠—Ç–æ—Ç —Ñ–∞–π–ª –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 72 —á–∞—Å–æ–≤."
            )
        else:
            # In production with webhook, send a link
            await message.answer(
                f"üéâ –í–∞—à –æ—Ç—á–µ—Ç Chat X-Ray –≥–æ—Ç–æ–≤!\n\n"
                f"<b>–°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç:</b> <a href='{report_url}'>–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–Ω–æ—à–µ–Ω–∏–π</a>\n\n"
                f"–≠—Ç–æ—Ç –æ—Ç—á–µ—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 72 —á–∞—Å–æ–≤."
            )
        
        # Add metadata to track file expiration
        expiration_time = datetime.now().timestamp() + (settings.REPORT_RETENTION_HOURS * 3600)
        with open(f"{report_file_path}.meta", "w") as f:
            f.write(str(expiration_time))
        
        # Delete the original upload file metadata
        upload_expiration_time = datetime.now().timestamp() + (settings.UPLOAD_RETENTION_HOURS * 3600)
        with open(f"{upload_file_path}.meta", "w") as f:
            f.write(str(upload_expiration_time))
            
    except Exception as e:
        logger.exception(f"Error processing file: {e}")
        if settings.SENTRY_DSN:
            import sentry_sdk
            sentry_sdk.capture_exception(e)
        
        await message.answer(
            "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        
        # Make sure to clean up any files if there was an error
        if os.path.exists(upload_file_path):
            os.unlink(upload_file_path)
        if os.path.exists(html_file_path):
            os.unlink(html_file_path)
        if os.path.exists(report_file_path):
            os.unlink(report_file_path) 